# PyBridge -- online contract bridge made easy.
# Copyright (C) 2004-2006 PyBridge Project.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.


from zope.interface import Interface


class ITable(Interface):
    """ITable defines generic methods for use with any table.
    
    This interface makes no assumptions about the game to be played,
    besides that it has players.
    """


    def addPlayer(self, position, player):
        """Registers an observer as an active player, provided:
        
        - observer is not already playing at this table.
        - the specified position is vacant.
        
        @param player: player identifier.
        @param position: position which player takes.
        """


    def removePlayer(self, player):
        """Removes player from their position.
        
        @param player: player identifier.
        """


    def sendMessage(self, message, sender, recipients):
        """Issues message from sender to all named recipients, or to all observers.
        
        @param message: message text string.
        @param sender: identifier of sender.
        @param recipients: identifiers of recipient observers.
        """




class ITableEvents(Interface):
    """ITableEvents defines the events which may be generated by ITable.
    
    """


    def observerAdded(self, table, observer):
        """Called when an observer is added to the table.
        
        @param table: reference to table.
        @param observer: observer identifier.
        """


    def observerRemoved(self, table, observer):
        """Called when an observer is removed from the table.
        
        @param table: reference to table.
        @param observer: observer identifier.
        """


    def playerAdded(self, table, player, position):
        """Called when a player takes the position.
        
        @param table: reference to table.
        @param player: player identifier.
        @param position: position which player takes.
        """


    def playerRemoved(self, table, player, position):
        """Called when a player is removed from their position.
        
        @param table: reference to table.
        @param player: player identifier.
        @param position: position which player leaves.
        """


    def messageReceived(self, table, message, sender, recipients):
        """Called when a message from sender is received.
        
        @param table: reference to table.
        @param message: message text string.
        @param sender: identifier of sender.
        @param recipients: identifiers of recipient observers.  
        """

